name: ðŸ“¦ðŸš€ Build & Release

on:
  push:
    branches:
      - main
    tags:
      - '**'
  pull_request:
    branches:
      - '**'

concurrency:
  # SHA is added to the end if on `main` to let all main workflows run
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.event_name }}-${{ github.ref == 'refs/heads/main' && github.sha || '' }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
    name: Build Installer ${{ matrix.os.name }}
    runs-on: ${{ matrix.os.runs-on }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]
        os:
          # TODO: use old versions for improved compatibility?
          - name: Linux
            matrix: linux
            runs-on: ubuntu-latest
            npm-run-command: package-linux
            electron-builder-unpacked: linux-unpacked
            token-driver-artifact: climate-token-client-chia-linux-amd64
            executable-extension: ''
          - name: macOS
            matrix: macos
            runs-on: macos-latest
            npm-run-command: package-macos
            electron-builder-unpacked: mac
            token-driver-artifact: climate-token-client-chia-macos-amd64
            executable-extension: ''
          - name: Windows
            matrix: windows
            runs-on: windows-latest
            npm-run-command: package-windows
            electron-builder-unpacked: win-unpacked
            token-driver-artifact: climate-token-client-chia-windows-amd64
            executable-extension: '.exe'

    steps:
      - uses: Chia-Network/actions/clean-workspace@main

      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node 16.x
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      - name: install dmg-license
        if: matrix.os.matrix == 'macos'
        run: |
          npm install dmg-license

      - name: download token driver
        env:
          GH_TOKEN: ${{ secrets.GH_READ_REPOS }}
        run: |
          # TODO: totally hacking it with this pr branch so there's a build
          RUN_ID=$(gh run list --repo chia-network/climate-token-driver --branch more_binaries --limit 1 --json databaseId --jq '.[0].databaseId')
          gh run download $RUN_ID --repo chia-network/climate-token-driver --name ${{ matrix.os.token-driver-artifact }} --dir downloaded-artifacts/
          mkdir -p build/
          # expected to fail if there are multiple files
          mv downloaded-artifacts/* build/main${{ matrix.os.executable-extension }}
          ls -la build/ || true

      - name: prep
        run: |
          cp .env.example .env
          # back to this once we have a lock: npm ci
          npm install

      - name: Build electron app
        env:
          # macos
          CSC_FOR_PULL_REQUEST: "true"
          # windows
          CSC_LINK: ${{ secrets.WIN_CODE_SIGN_CERT }}
          CSC_KEY_PASSWORD: ${{ secrets.WIN_CODE_SIGN_PASSWORD }}
        run: |
          npm run build
          npm run ${{ matrix.os.npm-run-command }}

          ls -la dist || true
          ls -la dist/${{ matrix.os.electron-builder-unpacked }} || true
          ls -la dist/${{ matrix.os.electron-builder-unpacked }}/resources || true
          mkdir -p artifacts/
          cp dist/'Climate Wallet'* artifacts/

      - name: Import Apple installer signing certificate
        if: matrix.os.matrix == 'macos'
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_DEV_ID_APP }}
          p12-password: ${{ secrets.APPLE_DEV_ID_APP_PASS }}

      - name: Notarize
        run: |
          DMG_FILE=$(find ${{ github.workspace }}/artifacts/ -type f -name '*.dmg')
          npm install -g notarize-cli
          notarize-cli \
            --file="$DMG_FILE" \
            --bundle-id net.chia.climate-wallet \
            --username "${{ secrets.APPLE_NOTARIZE_USERNAME }}" \
            --password "${{ secrets.APPLE_NOTARIZE_PASSWORD }}"

      - name: Upload Installer to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os.name }}
          path: 'artifacts/*'

  build_windows:
    name: Build Windows Installer
    runs-on: windows-2019
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node 16.x
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      - name: npm install
        run: |
          node --version
          npm install
      - name: Build electron app
        env:
          CSC_LINK: ${{ secrets.WIN_CODE_SIGN_CERT }}
          CSC_KEY_PASSWORD: ${{ secrets.WIN_CODE_SIGN_PASSWORD }}
        run: npm run electron:package:win

      - name: Upload Windows Installer
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: ${{ github.workspace }}/dist/*.exe

  build_linux:
    name: Build Linux Installer
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node 16.x
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      - name: npm install
        run: |
          node --version
          npm install
      - name: Build electron app
        run: npm run electron:package:linux

      - name: Upload Linux Installer
        uses: actions/upload-artifact@v3
        with:
          name: linux-installer
          path: ${{ github.workspace }}/dist/*.deb

  build_web:
    name: Build Climate Warehouse Web App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node 16.x
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      - name: npm install and build
        run: |
          node --version
          npm install
          npm run build
      - name: Create .tar.gz of the web build
        run: tar -cvzf web-build.tar.gz build

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: web-build
          path: web-build.tar.gz

  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - build_mac
      - build_windows
      - build_linux
      - build_web
    steps:
      - name: Download Windows artifacts
        uses: actions/download-artifact@v3
        with:
          name: windows-installer
          path: windows-installer

      - name: Download MacOS artifacts
        uses: actions/download-artifact@v3
        with:
          name: mac-installer
          path: mac-installer

      - name: Download Linux artifacts
        uses: actions/download-artifact@v3
        with:
          name: linux-installer
          path: linux-installer

      - name: Download Web artifact
        uses: actions/download-artifact@v3
        with:
          name: web-build
          path: web-build

      - name: Get Filenames
        run: |
          DMG_FILE=$(find ${{ github.workspace }}/mac-installer/ -type f -name '*.dmg')
          DEB_FILE=$(find ${{ github.workspace }}/linux-installer/ -type f -name '*.deb')
          EXE_FILE=$(find ${{ github.workspace }}/windows-installer/ -type f -name '*.exe')
          WEB_FILE=$(find ${{ github.workspace }}/web-build/ -type f -name '*.tar.gz')
          echo "DMG_FILE=$DMG_FILE" >>$GITHUB_ENV
          echo "DEB_FILE=$DEB_FILE" >>$GITHUB_ENV
          echo "EXE_FILE=$EXE_FILE" >>$GITHUB_ENV
          echo "WEB_FILE=$WEB_FILE" >>$GITHUB_ENV
      - name: Release
        uses: softprops/action-gh-release@v0.1.15
        with:
          files: |
            ${{ env.DMG_FILE }}
            ${{ env.DEB_FILE }}
            ${{ env.EXE_FILE }}
            ${{ env.WEB_FILE }}
